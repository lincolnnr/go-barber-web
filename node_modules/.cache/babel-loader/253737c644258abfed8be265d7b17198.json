{"ast":null,"code":"var _jsxFileName = \"/Users/lincolnnogueira/Documents/Projects/go-barber-web/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\n\nconst Input = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    isFocused: isFocused\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    onFocus: () => setIsFocused(true),\n    onBlur: () => setIsFocused(false),\n    defaultValue: defaultValue,\n    ref: inputRef\n  }, rest)));\n};\n\nexport default Input;","map":{"version":3,"sources":["/Users/lincolnnogueira/Documents/Projects/go-barber-web/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useField","Container","Input","name","icon","Icon","rest","fieldName","defaultValue","error","registerField","inputRef","isFocused","setIsFocused","ref","current","path"],"mappings":";AAAA,OAAOA,KAAP,IAAoCC,SAApC,EAA+CC,MAA/C,EAAuDC,QAAvD,QAAsE,OAAtE;AAEA,SAASC,QAAT,QAA0B,cAA1B;AAEA,SAASC,SAAT,QAA0B,UAA1B;;AAOA,MAAMC,KAA2B,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAI,EAAEC,IAAb;AAAmB,KAAGC;AAAtB,CAAD,KAAiC;AACrE,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDV,QAAQ,CAACG,IAAD,CAAlE;AACA,QAAMQ,QAAQ,GAAGb,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,aAAa,CAAC;AACVP,MAAAA,IAAI,EAAEI,SADI;AAEVO,MAAAA,GAAG,EAAEH,QAAQ,CAACI,OAFJ;AAGVC,MAAAA,IAAI,EAAE;AAHI,KAAD,CAAb;AAKH,GANQ,EAMN,CAACT,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,sBACI,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEE;AAAtB,KACKP,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,IADb,eAEI;AACI,IAAA,OAAO,EAAE,MAAMQ,YAAY,CAAC,IAAD,CAD/B;AAEI,IAAA,MAAM,EAAE,MAAMA,YAAY,CAAC,KAAD,CAF9B;AAGI,IAAA,YAAY,EAAEL,YAHlB;AAII,IAAA,GAAG,EAAEG;AAJT,KAKQL,IALR,EAFJ,CADJ;AAUE,CAvBF;;AAyBA,eAAeJ,KAAf","sourcesContent":["import React, {InputHTMLAttributes, useEffect, useRef, useState} from \"react\";\nimport { IconBaseProps } from 'react-icons';\nimport { useField  } from '@unform/core';\n\nimport { Container } from './styles';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n    name: string;\n    icon?: React.ComponentType<IconBaseProps>; \n}\n\nconst Input: React.FC<InputProps> = ({name, icon: Icon, ...rest}) => {\nconst { fieldName, defaultValue, error, registerField } = useField(name);\nconst inputRef = useRef(null);\nconst [isFocused, setIsFocused] = useState(false);\n\nuseEffect(() => {\n    registerField({\n        name: fieldName,\n        ref: inputRef.current,\n        path: 'value',\n    });\n}, [fieldName, registerField]);\n\nreturn (\n    <Container isFocused={isFocused}>\n        {Icon && <Icon size={20} />}\n        <input \n            onFocus={() => setIsFocused(true)}\n            onBlur={() => setIsFocused(false)}\n            defaultValue={defaultValue} \n            ref={inputRef}\n            {...rest} />\n    </Container>\n)};\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}