{"ast":null,"code":"var _jsxFileName = \"/Users/lincolnnogueira/Documents/Projects/go-barber-web/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\n\nconst Input = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFillded, setIsFillded] = useState(false);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n    setIsFillded(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value));\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    isFillded: isFillded,\n    isFocused: isFocused\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    onFocus: () => setIsFocused(true),\n    onBlur: handleInputBlur,\n    defaultValue: defaultValue,\n    ref: inputRef\n  }, rest)));\n};\n\nexport default Input;","map":{"version":3,"sources":["/Users/lincolnnogueira/Documents/Projects/go-barber-web/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","useField","Container","Input","name","icon","Icon","rest","fieldName","defaultValue","error","registerField","inputRef","isFocused","setIsFocused","isFillded","setIsFillded","handleInputBlur","current","value","ref","path"],"mappings":";AAAA,OAAOA,KAAP,IAAoCC,SAApC,EAA+CC,MAA/C,EAAuDC,QAAvD,EAAiEC,WAAjE,QAAmF,OAAnF;AAEA,SAASC,QAAT,QAA0B,cAA1B;AAEA,SAASC,SAAT,QAA0B,UAA1B;;AAOA,MAAMC,KAA2B,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAI,EAAEC,IAAb;AAAmB,KAAGC;AAAtB,CAAD,KAAiC;AACrE,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDV,QAAQ,CAACG,IAAD,CAAlE;AACA,QAAMQ,QAAQ,GAAGd,MAAM,CAAmB,IAAnB,CAAvB;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMkB,eAAe,GAAGjB,WAAW,CAAC,MAAM;AAAA;;AACtCc,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,IAAAA,YAAY,CAAC,CAAC,uBAACJ,QAAQ,CAACM,OAAV,sDAAC,kBAAkBC,KAAnB,CAAF,CAAZ;AACH,GAHkC,EAGhC,EAHgC,CAAnC;AAKAtB,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,aAAa,CAAC;AACVP,MAAAA,IAAI,EAAEI,SADI;AAEVY,MAAAA,GAAG,EAAER,QAAQ,CAACM,OAFJ;AAGVG,MAAAA,IAAI,EAAE;AAHI,KAAD,CAAb;AAKH,GANQ,EAMN,CAACb,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,sBACI,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEI,SAAtB;AAAiC,IAAA,SAAS,EAAEF;AAA5C,KACKP,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,IADb,eAEI;AACI,IAAA,OAAO,EAAE,MAAMQ,YAAY,CAAC,IAAD,CAD/B;AAEI,IAAA,MAAM,EAAEG,eAFZ;AAGI,IAAA,YAAY,EAAER,YAHlB;AAII,IAAA,GAAG,EAAEG;AAJT,KAKQL,IALR,EAFJ,CADJ;AAUE,CA7BF;;AA+BA,eAAeJ,KAAf","sourcesContent":["import React, {InputHTMLAttributes, useEffect, useRef, useState, useCallback} from \"react\";\nimport { IconBaseProps } from 'react-icons';\nimport { useField  } from '@unform/core';\n\nimport { Container } from './styles';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n    name: string;\n    icon?: React.ComponentType<IconBaseProps>; \n}\n\nconst Input: React.FC<InputProps> = ({name, icon: Icon, ...rest}) => {\nconst { fieldName, defaultValue, error, registerField } = useField(name);\nconst inputRef = useRef<HTMLInputElement>(null);\nconst [isFocused, setIsFocused] = useState(false);\nconst [isFillded, setIsFillded] = useState(false);\n\nconst handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n    setIsFillded(!!inputRef.current?.value);\n}, []);\n\nuseEffect(() => {\n    registerField({\n        name: fieldName,\n        ref: inputRef.current,\n        path: 'value',\n    });\n}, [fieldName, registerField]);\n\nreturn (\n    <Container isFillded={isFillded} isFocused={isFocused}>\n        {Icon && <Icon size={20} />}\n        <input \n            onFocus={() => setIsFocused(true)}\n            onBlur={handleInputBlur}\n            defaultValue={defaultValue} \n            ref={inputRef}\n            {...rest} />\n    </Container>\n)};\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}