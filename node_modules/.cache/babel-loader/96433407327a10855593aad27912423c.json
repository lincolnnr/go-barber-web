{"ast":null,"code":"var _jsxFileName = \"/Users/lincolnnogueira/Documents/Projects/go-barber-web/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\nimport { Container, Error } from './styles';\n\nconst Input = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFillded, setIsFillded] = useState(false);\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n    setIsFillded(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value));\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    isErrored: !!error,\n    isFocused: isFocused,\n    isFilled: isFilled\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    defaultValue: defaultValue,\n    ref: inputRef\n  }, rest)), error && /*#__PURE__*/React.createElement(Error, {\n    title: error\n  }, /*#__PURE__*/React.createElement(FiAlertCircle, {\n    color: \"#c53030\",\n    size: 20\n  })));\n};\n\nexport default Input;","map":{"version":3,"sources":["/Users/lincolnnogueira/Documents/Projects/go-barber-web/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","FiAlertCircle","useField","Container","Error","Input","name","icon","Icon","rest","fieldName","defaultValue","error","registerField","inputRef","isFocused","setIsFocused","isFillded","setIsFillded","handleInputFocus","handleInputBlur","current","value","ref","path","isFilled"],"mappings":";AAAA,OAAOA,KAAP,IAAoCC,SAApC,EAA+CC,MAA/C,EAAuDC,QAAvD,EAAiEC,WAAjE,QAAmF,OAAnF;AAEA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,QAAT,QAA0B,cAA1B;AAEA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,UAAjC;;AAOA,MAAMC,KAA2B,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAI,EAAEC,IAAb;AAAmB,KAAGC;AAAtB,CAAD,KAAiC;AACrE,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDX,QAAQ,CAACI,IAAD,CAAlE;AACA,QAAMQ,QAAQ,GAAGhB,MAAM,CAAmB,IAAnB,CAAvB;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACkB,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMoB,gBAAgB,GAAGnB,WAAW,CAAC,MAAM;AACvCgB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFmC,EAEjC,EAFiC,CAApC;AAIA,QAAMI,eAAe,GAAGpB,WAAW,CAAC,MAAM;AAAA;;AACtCgB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,IAAAA,YAAY,CAAC,CAAC,uBAACJ,QAAQ,CAACO,OAAV,sDAAC,kBAAkBC,KAAnB,CAAF,CAAZ;AACH,GAHkC,EAGhC,EAHgC,CAAnC;AAKAzB,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,aAAa,CAAC;AACVP,MAAAA,IAAI,EAAEI,SADI;AAEVa,MAAAA,GAAG,EAAET,QAAQ,CAACO,OAFJ;AAGVG,MAAAA,IAAI,EAAE;AAHI,KAAD,CAAb;AAKH,GANQ,EAMN,CAACd,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,sBACI,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAE,CAAC,CAACD,KAAxB;AAA+B,IAAA,SAAS,EAAEG,SAA1C;AAAqD,IAAA,QAAQ,EAAEU;AAA/D,KACKjB,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,IADb,eAEI;AACI,IAAA,OAAO,EAAEW,gBADb;AAEI,IAAA,MAAM,EAAEC,eAFZ;AAGI,IAAA,YAAY,EAAET,YAHlB;AAII,IAAA,GAAG,EAAEG;AAJT,KAKQL,IALR,EAFJ,EAWSG,KAAK,iBACF,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEA;AAAd,kBACI,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAC,SAArB;AAA+B,IAAA,IAAI,EAAE;AAArC,IADJ,CAZZ,CADJ;AAkBE,CAzCF;;AA2CA,eAAeP,KAAf","sourcesContent":["import React, {InputHTMLAttributes, useEffect, useRef, useState, useCallback} from \"react\";\nimport { IconBaseProps } from 'react-icons';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField  } from '@unform/core';\n\nimport { Container, Error } from './styles';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n    name: string;\n    icon?: React.ComponentType<IconBaseProps>; \n}\n\nconst Input: React.FC<InputProps> = ({name, icon: Icon, ...rest}) => {\nconst { fieldName, defaultValue, error, registerField } = useField(name);\nconst inputRef = useRef<HTMLInputElement>(null);\nconst [isFocused, setIsFocused] = useState(false);\nconst [isFillded, setIsFillded] = useState(false);\n\nconst handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n}, []);\n\nconst handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n    setIsFillded(!!inputRef.current?.value);\n}, []);\n\nuseEffect(() => {\n    registerField({\n        name: fieldName,\n        ref: inputRef.current,\n        path: 'value',\n    });\n}, [fieldName, registerField]);\n\nreturn (\n    <Container isErrored={!!error} isFocused={isFocused} isFilled={isFilled}>\n        {Icon && <Icon size={20} />}\n        <input \n            onFocus={handleInputFocus}\n            onBlur={handleInputBlur}\n            defaultValue={defaultValue} \n            ref={inputRef}\n            {...rest} />\n            \n      \n\n            {error && (\n                <Error title={error}>\n                    <FiAlertCircle color=\"#c53030\" size={20} />\n                </Error>\n            )}\n    </Container>\n)};\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}