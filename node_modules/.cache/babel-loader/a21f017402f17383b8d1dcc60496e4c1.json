{"ast":null,"code":"var _jsxFileName = \"/Users/lincolnnogueira/Documents/Projects/go-barber-web/src/hooks/AuthContext.tsx\";\nimport React, { createContext, useCallback, useContext, useState } from 'react';\nimport api from '../services/api';\nconst AuthContext = createContext({});\n\nconst AuthProvider = ({\n  children\n}) => {\n  const [data, setData] = useState(() => {\n    const token = localStorage.getItem('@GiBarber:tokne');\n    const user = localStorage.getItem('@GiBarber:user');\n\n    if (token && user) {\n      return {\n        token,\n        user: JSON.parse(user)\n      };\n    }\n\n    return {};\n  });\n  const signIn = useCallback(async ({\n    email,\n    password\n  }) => {\n    const response = await api.post('sessions', {\n      email,\n      password\n    });\n    const {\n      token,\n      user\n    } = response.data;\n    localStorage.setItem('@GiBarber:tokne', token);\n    localStorage.setItem('@GiBarber:user', JSON.stringify(user));\n    setData({\n      token,\n      user\n    });\n  }, []);\n  const signOut = useCallback(() => {\n    localStorage.removeItem('@GiBarber:tokne');\n    localStorage.removeItem('@GiBarber:user');\n    setData({});\n  }, []);\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      user: data.user,\n      signIn,\n      signOut\n    }\n  }, children);\n};\n\nfunction useAuth() {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n\n  return context;\n}\n\n;\nexport { AuthProvider, useAuth };","map":{"version":3,"sources":["/Users/lincolnnogueira/Documents/Projects/go-barber-web/src/hooks/AuthContext.tsx"],"names":["React","createContext","useCallback","useContext","useState","api","AuthContext","AuthProvider","children","data","setData","token","localStorage","getItem","user","JSON","parse","signIn","email","password","response","post","setItem","stringify","signOut","removeItem","useAuth","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,UAA5C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AAkBA,MAAMC,WAAW,GAAGL,aAAa,CAAkB,EAAlB,CAAjC;;AAEA,MAAMM,YAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC7C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAY,MAAM;AAC9C,UAAMO,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAd;AACA,UAAMC,IAAI,GAAGF,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAb;;AAEA,QAAGF,KAAK,IAAIG,IAAZ,EACA;AACI,aAAO;AAACH,QAAAA,KAAD;AAAQG,QAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWF,IAAX;AAAd,OAAP;AACH;;AACD,WAAO,EAAP;AACH,GAT+B,CAAhC;AAWA,QAAMG,MAAM,GAAGf,WAAW,CAAE,OAAM;AAACgB,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAN,KAA4B;AACpD,UAAMC,QAAQ,GAAG,MAAMf,GAAG,CAACgB,IAAJ,CAAS,UAAT,EAAqB;AACxCH,MAAAA,KADwC;AAExCC,MAAAA;AAFwC,KAArB,CAAvB;AAKA,UAAM;AAACR,MAAAA,KAAD;AAAQG,MAAAA;AAAR,QAAgBM,QAAQ,CAACX,IAA/B;AAEAG,IAAAA,YAAY,CAACU,OAAb,CAAqB,iBAArB,EAAwCX,KAAxC;AACAC,IAAAA,YAAY,CAACU,OAAb,CAAqB,gBAArB,EAAuCP,IAAI,CAACQ,SAAL,CAAeT,IAAf,CAAvC;AAEAJ,IAAAA,OAAO,CAAC;AAACC,MAAAA,KAAD;AAAQG,MAAAA;AAAR,KAAD,CAAP;AACH,GAZyB,EAYvB,EAZuB,CAA1B;AAcA,QAAMU,OAAO,GAAGtB,WAAW,CAAC,MAAM;AAC9BU,IAAAA,YAAY,CAACa,UAAb,CAAwB,iBAAxB;AACAb,IAAAA,YAAY,CAACa,UAAb,CAAwB,gBAAxB;AAEAf,IAAAA,OAAO,CAAC,EAAD,CAAP;AACH,GAL0B,EAKxB,EALwB,CAA3B;AAOA,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACI,MAAAA,IAAI,EAAEL,IAAI,CAACK,IAAZ;AAAkBG,MAAAA,MAAlB;AAA0BO,MAAAA;AAA1B;AAA7B,KACKhB,QADL,CADJ;AAKH,CAtCD;;AAwCA,SAASkB,OAAT,GAAmC;AAC/B,QAAMC,OAAO,GAAGxB,UAAU,CAACG,WAAD,CAA1B;;AAEA,MAAG,CAACqB,OAAJ,EAAY;AACR,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;AAED,SAAOD,OAAP;AACH;;AAAA;AAED,SAAQpB,YAAR,EAAsBmB,OAAtB","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from 'react';\nimport api from '../services/api';\n\ninterface AuthState {\n    token: string;\n    user: object; \n}\n\ninterface SignInCredentials {\n    email  : string;\n    password: string;\n}\n\ninterface AuthContextData {\n    user: object; \n    signIn(credentials: SignInCredentials): Promise<void>;\n    signOut(): void;\n}\n\nconst AuthContext = createContext<AuthContextData>({} as AuthContextData);\n\nconst AuthProvider: React.FC = ({ children }) => {\n    const [data, setData] = useState<AuthState>(() => {\n        const token = localStorage.getItem('@GiBarber:tokne');\n        const user = localStorage.getItem('@GiBarber:user');\n\n        if(token && user)\n        {\n            return {token, user: JSON.parse(user)};\n        }\n        return {}  as AuthState;\n    });\n\n    const signIn = useCallback( async({email, password}) => { \n        const response = await api.post('sessions', {\n            email,\n            password,\n        }); \n\n        const {token, user} = response.data;\n\n        localStorage.setItem('@GiBarber:tokne', token);\n        localStorage.setItem('@GiBarber:user', JSON.stringify(user));\n\n        setData({token, user});\n    }, []);\n\n    const signOut = useCallback(() => {\n        localStorage.removeItem('@GiBarber:tokne');\n        localStorage.removeItem('@GiBarber:user');\n\n        setData({} as AuthState);\n    }, []);\n\n    return (\n        <AuthContext.Provider value={{user: data.user, signIn, signOut}}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nfunction useAuth(): AuthContextData{\n    const context = useContext(AuthContext);\n\n    if(!context){\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n\n    return context;\n};\n\nexport {AuthProvider, useAuth};"]},"metadata":{},"sourceType":"module"}