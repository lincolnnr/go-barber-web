{"ast":null,"code":"var _jsxFileName = \"/Users/lincolnnogueira/Documents/Projects/go-barber-web/src/context/AuthContext.tsx\";\nimport React, { createContext, useCallback, useContext, useState } from 'react';\nimport api from '../services/api';\nexport const AuthContext = createContext({});\nexport const AuthProvider = ({\n  children\n}) => {\n  const [data, setData] = useState(() => {\n    const token = localStorage.getItem('@GiBarber:tokne');\n    const user = localStorage.getItem('@GiBarber:user');\n\n    if (token && user) {\n      return {\n        token,\n        user: JSON.parse(user)\n      };\n    }\n\n    return {};\n  });\n  const signIn = useCallback(async ({\n    email,\n    password\n  }) => {\n    const response = await api.post('sessions', {\n      email,\n      password\n    });\n    const {\n      token,\n      user\n    } = response.data;\n    localStorage.setItem('@GiBarber:tokne', token);\n    localStorage.setItem('@GiBarber:user', JSON.stringify(user));\n    setData({\n      token,\n      user\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      user: data.user,\n      signIn\n    }\n  }, children);\n};\n\nfunction useAuth() {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n\n  return context;\n}\n\nexport default AuthContext;","map":{"version":3,"sources":["/Users/lincolnnogueira/Documents/Projects/go-barber-web/src/context/AuthContext.tsx"],"names":["React","createContext","useCallback","useContext","useState","api","AuthContext","AuthProvider","children","data","setData","token","localStorage","getItem","user","JSON","parse","signIn","email","password","response","post","setItem","stringify","useAuth","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,UAA5C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AAiBA,OAAO,MAAMC,WAAW,GAAGL,aAAa,CAAkB,EAAlB,CAAjC;AAEP,OAAO,MAAMM,YAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAY,MAAM;AAC9C,UAAMO,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAd;AACA,UAAMC,IAAI,GAAGF,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAb;;AAEA,QAAGF,KAAK,IAAIG,IAAZ,EACA;AACI,aAAO;AAACH,QAAAA,KAAD;AAAQG,QAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWF,IAAX;AAAd,OAAP;AACH;;AACD,WAAO,EAAP;AACH,GAT+B,CAAhC;AAWA,QAAMG,MAAM,GAAGf,WAAW,CAAE,OAAM;AAACgB,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAN,KAA4B;AACpD,UAAMC,QAAQ,GAAG,MAAMf,GAAG,CAACgB,IAAJ,CAAS,UAAT,EAAqB;AACxCH,MAAAA,KADwC;AAExCC,MAAAA;AAFwC,KAArB,CAAvB;AAKA,UAAM;AAACR,MAAAA,KAAD;AAAQG,MAAAA;AAAR,QAAgBM,QAAQ,CAACX,IAA/B;AAEAG,IAAAA,YAAY,CAACU,OAAb,CAAqB,iBAArB,EAAwCX,KAAxC;AACAC,IAAAA,YAAY,CAACU,OAAb,CAAqB,gBAArB,EAAuCP,IAAI,CAACQ,SAAL,CAAeT,IAAf,CAAvC;AAEAJ,IAAAA,OAAO,CAAC;AAACC,MAAAA,KAAD;AAAQG,MAAAA;AAAR,KAAD,CAAP;AACH,GAZyB,EAYvB,EAZuB,CAA1B;AAcA,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACA,MAAAA,IAAI,EAAEL,IAAI,CAACK,IAAZ;AAAkBG,MAAAA;AAAlB;AAA7B,KACKT,QADL,CADJ;AAKH,CA/BM;;AAiCP,SAASgB,OAAT,GAAmC;AAC/B,QAAMC,OAAO,GAAGtB,UAAU,CAACG,WAAD,CAA1B;;AAEA,MAAG,CAACmB,OAAJ,EAAY;AACR,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;AAED,SAAOD,OAAP;AACH;;AAED,eAAenB,WAAf","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from 'react';\nimport api from '../services/api';\n\ninterface AuthState {\n    token: string;\n    user: object; \n}\n\ninterface SignInCredentials {\n    email  : string;\n    password: string;\n}\n\ninterface AuthContextData {\n    user: object; \n    signIn(credentials: SignInCredentials): Promise<void>;\n}\n\nexport const AuthContext = createContext<AuthContextData>({} as AuthContextData);\n\nexport const AuthProvider: React.FC = ({ children }) => {\n    const [data, setData] = useState<AuthState>(() => {\n        const token = localStorage.getItem('@GiBarber:tokne');\n        const user = localStorage.getItem('@GiBarber:user');\n\n        if(token && user)\n        {\n            return {token, user: JSON.parse(user)};\n        }\n        return {}  as AuthState;\n    });\n\n    const signIn = useCallback( async({email, password}) => { \n        const response = await api.post('sessions', {\n            email,\n            password,\n        }); \n\n        const {token, user} = response.data;\n\n        localStorage.setItem('@GiBarber:tokne', token);\n        localStorage.setItem('@GiBarber:user', JSON.stringify(user));\n\n        setData({token, user});\n    }, []);\n\n    return (\n        <AuthContext.Provider value={{user: data.user, signIn}}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nfunction useAuth(): AuthContextData{\n    const context = useContext(AuthContext);\n\n    if(!context){\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n\n    return context;\n}\n\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}